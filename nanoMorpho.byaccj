/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *         Högni Freyr Gunnarsson, Son Van Nguyen, Viktor Þór Freysson     *
 * 				hfg7@hi.is          svn5@hi.is          vthf1@hi.is        *
 *                         Homework 4                                      *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


%{
	import java.io.*;
	import java.util.*;
%}

%token <sval> LITERAL,NAME,OP1,OP2,OP3,OP4,OP5,OP6,OP7
%token VAR,IF,ELSIF,ELSE,WHILE,RETURN,OPNAME
%type <obj> program, function, expr, exp, binopexpr, smallexpr, commasepExp, elseiforelse, elseifsent, elsesent, notexpr
%type <ival> nameloop
%type <sval> op
%right RETURN '='
%left OP1
%right OP2
%left OP3
%left OP4
%left OP5
%left OP6
%left OP7
%left UNOP

%%

/***********************************************************
* 					  NanoMorpho Syntax         		   *
************************************************************/ 
startOfNanoMorpho
	: 
		program {
			// Start our code generation. This methhod also adds the prologue and epilogue.
			generateProgram(name, ((Vector<Object>)($1)).toArray());
		}
	;

program
	:  
		// If there are more functions, add them up in a vector.
		program function { 
			((Vector<Object>)($1)).add($2); 
			$$=$1; 
		}
	|	function { 
			$$=new Vector<Object>(); 
			((Vector<Object>)($$)).add($1); 
		}
	;

function
	:
		{
			varAmount = 0; // We need to count the amount of decl to know how many times to push.
			varTable = new HashMap<String,Integer>();
		}
		NAME '(' nameloop ')'
		'{'
			decl
			expr
		'}' 
		{ 
			$$ = new Object[]{$2, $4, varAmount, ((Vector<Object>)($8)).toArray()}; 
		}
	;

// nameloops are function arguments and variable declerations like "a,b,c...".
nameloop
	// No arguments
	: 	{ $$ = 0; }
	// More than 1 arguments	
	| 	nameloop ',' NAME
		{ 
			addVar($3); 
			$$ = $1 + 1;
		}
	// 1 argument
	| 	NAME
		{ 
			addVar($1);
			$$ = 1; 
		}
	;

decl
	: 	VAR nameloop ';'
	;

/* expr from the NanoMorpho syntax diagram in markmid.pdf is 
   here split into expr, exp, notexpr, binopexpr and smallexpr: */
expr
	: 	expr exp ';'	 		
		{ 
			((Vector<Object>)($1)).add($2); 
			$$=$1;
		}
	| 	exp ';'	
		{ 
			$$ = new Vector<Object>(); 
			((Vector<Object>)($$)).add($1); 
		}
	;

exp
	: 	RETURN exp				
		{ $$ = new Object[]{"RETURN", $2}; }
	| 	NAME '=' exp
		{ $$ = new Object[]{"STORE", findVar($1), $3}; }
	| 	notexpr
		{ $$ = $1; }
	;

notexpr
	:	'!' notexpr
		{ $$ = new Object[]{"CALL", "!", new Object[]{$2} }; }
	|	binopexpr     
		{ $$ = $1; }
	;
	
/*  The levels of priority for binary operations */
binopexpr
	: 	binopexpr OP1 binopexpr	{ $$ = new Object[]{"CALL", $2 ,new Object[]{$1, $3}};}
	| 	binopexpr OP2 binopexpr	{ $$ = new Object[]{"CALL", $2 ,new Object[]{$1, $3}};}
	| 	binopexpr OP3 binopexpr	{ $$ = new Object[]{"CALL", $2 ,new Object[]{$1, $3}};}
	| 	binopexpr OP4 binopexpr	{ $$ = new Object[]{"CALL", $2 ,new Object[]{$1, $3}};}
	| 	binopexpr OP5 binopexpr	{ $$ = new Object[]{"CALL", $2 ,new Object[]{$1, $3}};}
	| 	binopexpr OP6 binopexpr	{ $$ = new Object[]{"CALL", $2 ,new Object[]{$1, $3}};}
	| 	binopexpr OP7 smallexpr	{ $$ = new Object[]{"CALL", $2 ,new Object[]{$1, $3}};}
	| 	op smallexpr %prec UNOP{ $$ = new Object[]{"CALL", $1 , new Object[]{$2}}; }
	| 	smallexpr { $$ = $1; }
	;

smallexpr
	: 	NAME '(' commasepExp ')' 
		{ $$ = new Object[]{"CALL", $1, ((Vector<Object>)($3)).toArray()}; }
	| 	NAME 						
		{ $$ = new Object[]{"FETCH", findVar($1)}; }
	| 	LITERAL					
		{ $$ = new Object[]{"LITERAL", $1}; }
	| 	'(' exp ')'				{ $$ = $2; }
	| 	WHILE '(' exp ')'
		'{'
			expr
		'}'
		{ $$ = new Object[]{"WHILE", $3, new Object[]{"BODY", ((Vector<Object>)($6)).toArray()}}; }
	| 	IF '(' exp ')'
		'{'
			expr
		'}'
		elseiforelse			
		{ $$ = new Object[]{"IF", $3, new Object[]{"BODY", ((Vector<Object>)($6)).toArray()}, $8}; }
	;

elseiforelse
	: 	// empty
		{ $$ = null; }
	| 	elseifsent
		{ $$ = $1; }
	|	elsesent
		{ $$ = $1; }
	;

elseifsent
	:	ELSIF '(' exp ')'
		'{'
			expr
		'}'
		elseifsent
		{ $$ = new Object[]{"IF", $3, new Object[]{"BODY", ((Vector<Object>)($6)).toArray()}, $8}; }
	| 	ELSIF '(' exp ')'
		'{'
			expr
		'}'
		elsesent 					
		{ $$ = new Object[]{"IF", $3, new Object[]{"BODY", ((Vector<Object>)($6)).toArray()}, $8}; }
	| 	ELSIF '(' exp ')'
		'{'
			expr
		'}'	
		{ $$ = new Object[]{"IF", $3, new Object[]{"BODY", ((Vector<Object>)($6)).toArray()}, null}; }
	;

elsesent
	: 	ELSE
		'{'
			expr
		'}'
		{ $$ = new Object[]{"IF", new Object[]{"LITERAL", "true"}, new Object[]{"BODY", ((Vector<Object>)($3)).toArray()}, null};}
	;

commasepExp
	:	// empty 				    
		{ $$ = new Vector<Object>(); }
	| 	commasepExp ',' exp		
		{ 
			((Vector<Object>)($1)).add($3);
			$$=$1; 
		}
	| 	exp						        
		{ 
			$$ = new Vector<Object>(); 
			((Vector<Object>)($$)).add($1); 
		}
	;

op
	:	OP1 | OP2 | OP3 | OP4 | OP5 | OP6 | OP7;

%%

private Lexer lexer;
private static int varAmount;
private static HashMap<String,Integer> varTable;
static private String name;
int last_token_read;

private void addVar( String name )
{
	if(varTable.get(name) != null)
	{
		yyerror("Variable " + name + " already exists");
	}
	varTable.put(name,varAmount++);
}

private int findVar( String name )
{
	Integer res = varTable.get(name);
	if(res == null)
	{
		yyerror("Variable " + name + " does not exist");
	}
	return res;
}

private int yylex()
{
	int yyl_return = -1;
	try
	{
		yylval = null;
		last_token_read = yyl_return = lexer.yylex();
		if(yylval==null)
			yylval = new ParserVal(Parser.yyname[yyl_return]);
	}
	catch (IOException e)
	{
		System.err.println("IO error: "+e);
	}
	return yyl_return;
}

public void yyerror(String message)
{
	System.err.println("Error: " + message);
	System.exit(1);
}

public Parser(Reader r)
{
	lexer = new Lexer(r, this);
}

public static void main(String nameloop[]) throws IOException
{
	Parser yyparser = new Parser(new FileReader(nameloop[0]));
	name = nameloop[0].substring(0,nameloop[0].lastIndexOf('.'));
	yyparser.yyparse();
}

/******************************************************
 *				Code generation starts here 	      *
 ******************************************************/

private static int nextLabel = 1;

private static void emit(String s)
{
	System.out.println(s);
}

public static int newLabel()
{
	return nextLabel++;
}

public void generateProgram(String filename, Object[] funs)
{
	emit("\"" +filename+ ".mexe\" = main in\n!\n{{");
	for( Object f: funs )
	{
		generateFunction((Object[])f);
	}
	emit("}}\n*\nBASIS;");
}

public void generateFunction(Object[] f)
{
	String funcName = (String)f[0];
	int argCount = (Integer)f[1];
	int varAmount = (Integer)f[2];

	emit("#\""+funcName+"[f"+argCount+"]\" =\n[");

	if(varAmount > 0 )
	{
		emit("(MakeVal null)");
		for(int i = 0; i < varAmount; i++)
		{
			emit("(Push)");
		}
	}

	for (Object exp : (Object[])f[3])
	{
	   generateExpr((Object[])exp);
	}
	emit("(Return)\n];");
}

public void generateExpr(Object[] exp)
{
	switch ((String)((Object[])exp)[0])
	{
		case "RETURN":
			generateExprP((Object[])((Object[])exp)[1]);
			emit("(Return)");
			break;
		case "CALL":
			Object[] args = (Object[])((Object[])exp)[2];
			int i;
			for(i=0; i != args.length; i++)
			{
				if(i==0)
				{
					generateExpr((Object[])args[i]);
				}
				else
				{
					generateExprP((Object[])args[i]);
				}
			}
			emit("(Call #\""+(String)((Object[])exp)[1]+"[f"+i+"]\" "+i+")");
			break;
		case "FETCH":
			emit("(Fetch "+(int)((Object[])exp)[1]+")");
			break;
		case "LITERAL":
			emit("(MakeVal "+(String)((Object[])exp)[1]+")");
			break;
		case "IF":
			int labElse = newLabel();
			int labEnd = newLabel();
			generateJumper(((Object[])(((Object[])exp)[1])),0,labElse);
			generateExpr(((Object[])(((Object[])exp)[2])));
			emit("(Go _"+labEnd+")");
			emit("_"+labElse+":");

			if(((Object[])(((Object[])exp)[3])) != null)
			{
				generateExpr(((Object[])(((Object[])exp)[3])));
			}
			emit("_"+labEnd+":");
			break;
		case "WHILE":
			int labTrue = newLabel();
			int labFalse = newLabel();
			emit("_"+labTrue+":");
			generateJumper(((Object[])(((Object[])exp)[1])),0,labFalse);
			generateExpr(((Object[])(((Object[])exp)[2])));
			emit("(Go _"+labTrue+")");
			emit("_"+labFalse+":");
			break;
		case "STORE":
			generateExpr((Object[])((Object[])exp)[2]);
			emit("(Store "+(int)((Object[])exp)[1]+")");
			break;
		case "BODY":
			for (Object b_expr : (Object[])exp[1])
			{
				generateExpr((Object[])b_expr);
			}
			break;
		default:
			throw new Error("Unknown intermediate code type: \""+(String)((Object[])exp)[0]+"\"");
	   }
}

public void generateJumper(Object[] exr, int lTrue, int lFalse)
{
	switch((String)exr[0])
	{
		case "LITERAL":
			String literal = (String)exr[1];
			if(literal.equals("null") || literal.equals("false"))
			{
				if( lFalse!=0 )
				{
					emit("(Go _"+lFalse+")");
				}
				return;
			}
			if(lTrue!=0)
			{
				emit("(Go _"+lTrue+")");
			}
			return;
		default:
			generateExpr(exr);
			if( lTrue!=0 ) emit("(GoTrue _"+lTrue+")");
			if( lFalse!=0 ) emit("(GoFalse _"+lFalse+")");
	}
}

public void generateExprP(Object[] exp)
{
	switch ((String)((Object[])exp)[0])
	{
		case "CALL":
			Object[] args = (Object[])((Object[])exp)[2];
			int i;
			for(i=0; i != args.length; i++)
			{
				generateExprP((Object[])args[i]);
			}
			if( i==0 )
			{
				emit("(Push)");
			}
			emit("(Call #\""+(String)((Object[])exp)[1]+"[f"+i+"]\" "+i+")");
			break;
		case "FETCH":
			emit("(FetchP "+(int)((Object[])exp)[1]+")");
			break;
		case "LITERAL":
			emit("(MakeValP "+(String)((Object[])exp)[1]+")");
			break;
		default:
			throw new Error("Unknown intermediate code type: \""+(String)((Object[])exp)[0]+"\"");
	}
}